
local service = 5412;--Set your Platoboost Id 
local secret = "116d0dfc-9eb2-4771-ad22-b5da726d8c39"; --Set Your Platoboost Api key
local useNonce = true; 
local onMessage = function(message)  game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message; }) end;


repeat task.wait(1) until game:IsLoaded() or game.Players.LocalPlayer;


local loadstringlinktoload = "https://pastebin.com/raw/zWunAAw3"

local requestSending = false;
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0;
local HttpService = game:GetService("HttpService")

local folderName = "TonyHubData"
local fileName = folderName .. "/key.json"

-- Create folder if missing
if not isfolder(folderName) then
    makefolder(folderName)
end


function lEncode(data)
    return HttpService:JSONEncode(data)
end
function lDecode(data)
    return HttpService:JSONDecode(data)
end
function lDigest(input)
    local inputStr = tostring(input)
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end

    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end

    -- Truncate to max 64 characters (or whatever your backend expects)
    return string.sub(hashHex, 1, 64)
end

local host = "https://api.platoboost.com";
local hostResponse = fRequest({
    Url = host .. "/public/connectivity",
    Method = "GET"
});
if hostResponse.StatusCode ~= 200 or hostResponse.StatusCode ~= 429 then
    host = "https://api.platoboost.net";
end

function cacheLink()
    if cachedTime + (10*60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = lDigest(fGetHwid())
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        });

        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body);

            if decoded.success == true then
                cachedLink = decoded.data.url;
                cachedTime = fOsTime();
                return true, cachedLink;
            else
                onMessage(decoded.message);
                return false, decoded.message;
            end
        elseif response.StatusCode == 429 then
            local msg = "you are being rate limited, please wait 20 seconds and try again.";
            onMessage(msg);
            return false, msg;
        end

        local msg = "Failed to cache link.";
        onMessage(msg);
        return false, msg;
    else
        return true, cachedLink;
    end
end



cacheLink();

local generateNonce = function()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end


for _ = 1, 5 do
    local oNonce = generateNonce();
    task.wait(0.2)
    if generateNonce() == oNonce then
        local msg = "platoboost nonce error.";
        onMessage(msg);
        error(msg);
    end
end

local copyLink = function()
    local success, link = cacheLink();
    
    if success then
        print("SetClipBoard")
        fSetClipboard(link);
    end
end


local redeemKey = function(key)
    local nonce = generateNonce();
    local endpoint = host .. "/public/redeem/" .. fToString(service);

    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }

    if useNonce then
        body.nonce = nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = {
            ["Content-Type"] = "application/json"
        }
    });

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                        return true;
                    else
                        onMessage("failed to verify integrity.");
                        return false;
                    end    
                else
                    return true;
                end
            else
                onMessage("key is invalid.");
                return false;
            end
        else
            if fStringSub(decoded.message, 1, 27) == "unique constraint violation" then
                onMessage("you already have an active key, please wait for it to expire before redeeming it.");
                return false;
            else
                onMessage(decoded.message);
                return false;
            end
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false; 
    end
end


local verifyKey = function(key)
    if requestSending == true then
        onMessage("a request is already being sent, please slow down.");
        return false;
    else
        requestSending = true;
    end

    local nonce = generateNonce();
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key;

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce;
    end
    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    });

    requestSending = false;

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    return true;
                else
                    return true;
                end
            else
                if fStringSub(key, 1, 4) == "FREE_" then
                    return redeemKey(key);
                else
                    onMessage("key is invalid.");
                    return false;
                end
            end
        else
            onMessage(decoded.message);
            return false;
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false;
    end
end




local getFlag = function(name)
    local nonce = generateNonce();
    local endpoint = host .. "/public/flag/" .. fToString(service) .. "?name=" .. name;

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    });

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if useNonce then
                if decoded.data.hash == lDigest(fToString(decoded.data.value) .. "-" .. nonce .. "-" .. secret) then
                    return decoded.data.value;
                else
                    onMessage("failed to verify integrity.");
                    return nil;
                end
            else
                return decoded.data.value;
            end
        else
            onMessage(decoded.message);
            return nil;
        end
    else
        return nil;
    end
end

task.spawn(function()



local NotificationLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/DemogorgonItsMe/DemoNotifications/refs/heads/main/V2/source.lua"))()
            NotificationLib:SetTheme({
            background = "rbxassetid://8222365465", -- Keep the same unless you want a greyscale image
            primaryColor = Color3.fromRGB(20, 20, 20), -- Dark grey (main background)
            successColor = Color3.fromRGB(20, 20, 20), -- Muted green
            errorColor = Color3.fromRGB(20, 20, 20), -- Muted red
            warningColor = Color3.fromRGB(20, 20, 20), -- Muted yellow
            textColor = Color3.fromRGB(230, 230, 230), -- Light grey text
            cornerRadius = UDim.new(0, 12),
            iconSize = UDim2.new(0, 24, 0, 24),
            font = Enum.Font.GothamSemibold,
            closeIcon = "rbxassetid://6031094677",
            mobileScale = 0.8,
            closeButtonSize = UDim2.new(0, 22, 0, 22),
            showStroke = true,
            useBackgroundColor = true,
            backgroundTransparency = 0.15 -- Almost opaque for that solid black look
        })

local whoisitmadeby = "TonyScripts"
local nameofthescript = "Build A Plane"
local thenoteofthekey = "Key System"
local titleofscript = 'Build A Plane'

-- fetch key remotely

 
local ScreenGui = Instance.new("ScreenGui")
local KeySystem = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local title = Instance.new("TextLabel")
local TextButton = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")
local TextButton2 = Instance.new("TextButton")
local UICorner_3 = Instance.new("UICorner")
local madeby = Instance.new("TextLabel")
local note = Instance.new("TextLabel")
local KeyTextbox = Instance.new("TextBox")
local UICorner_4 = Instance.new("UICorner")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

KeySystem.Name = 'Key'
KeySystem.Parent = ScreenGui
KeySystem.Active = true
KeySystem.AnchorPoint = Vector2.new(0.5, 0.5)
KeySystem.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
KeySystem.BorderSizePixel = 0
KeySystem.Draggable = true
KeySystem.Position = UDim2.new(0.5, 0, 0.5, 0)
KeySystem.Size = UDim2.new(0.35, 0, 0.45, 0)

UICorner.CornerRadius = UDim.new(0, 15)
UICorner.Parent = KeySystem

title.Name = "title"
title.Parent = KeySystem
title.AnchorPoint = Vector2.new(0.5, 0.5)
title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
title.BackgroundTransparency = 1.000
title.BorderColor3 = Color3.fromRGB(0, 0, 0)
title.BorderSizePixel = 0
title.Position = UDim2.new(0.5, 0, 0.08, 0)
title.Size = UDim2.new(0.9, 0, 0.12, 0)
title.Font = Enum.Font.Gotham
title.Text = titleofscript
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextScaled = true
title.TextSize = 14.000
title.TextWrapped = true

TextButton.Parent = KeySystem
TextButton.AnchorPoint = Vector2.new(0.5, 0.5)
TextButton.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
TextButton.BackgroundTransparency = 0.100
TextButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BorderSizePixel = 3
TextButton.Position = UDim2.new(0.5, 0, 0.54, 0)
TextButton.Size = UDim2.new(0.85, 0, 0.12, 0)
TextButton.Font = Enum.Font.Gotham
TextButton.Text = "Check Key"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true

TextButton.MouseButton1Click:Connect(function()
    if KeyTextbox and KeyTextbox.Text then
        local key = KeyTextbox.Text
        local Verify = verifyKey(key)
            if Verify then
                local data = {
                key = key
            }
            writefile(fileName, HttpService:JSONEncode(data))
                TextButton.Text = 'Correct Key!'
                task.wait(1.5)
                ScreenGui:Destroy()
                loadstring(game:HttpGet(loadstringlinktoload))()
            else
                TextButton.Text = 'Invalid Key!'
                task.wait(2.5)
                TextButton.Text = 'Check Key'
        end 
    end
end)

UICorner_2.CornerRadius = UDim.new(0, 15)
UICorner_2.Parent = TextButton

TextButton2.Name = "TextButton2"
TextButton2.Parent = KeySystem
TextButton2.AnchorPoint = Vector2.new(0.5, 0.5)
TextButton2.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
TextButton2.BackgroundTransparency = 0.100
TextButton2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton2.BorderSizePixel = 0
TextButton2.Position = UDim2.new(0.5, 0, 0.38, 0)
TextButton2.Size = UDim2.new(0.85, 0, 0.12, 0)
TextButton2.Font = Enum.Font.Gotham
TextButton2.Text = "Get Key"
TextButton2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton2.TextScaled = true
TextButton2.TextSize = 14.000
TextButton2.TextWrapped = true


TextButton2.MouseButton1Click:Connect(function()
    if KeyTextbox and KeyTextbox.Text then
        copyLink()
    end
end)



UICorner_3.CornerRadius = UDim.new(0, 15)
UICorner_3.Parent = TextButton2

madeby.Name = "madeby"
madeby.Parent = KeySystem
madeby.AnchorPoint = Vector2.new(0.5, 0.5)
madeby.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
madeby.BackgroundTransparency = 1.000
madeby.BorderColor3 = Color3.fromRGB(0, 0, 0)
madeby.BorderSizePixel = 0
madeby.Position = UDim2.new(0.5, 0, 0.2, 0)
madeby.Size = UDim2.new(0.9, 0, 0.1, 0)
madeby.Font = Enum.Font.Gotham
madeby.Text = whoisitmadeby
madeby.TextColor3 = Color3.fromRGB(255, 255, 255)
madeby.TextScaled = true
madeby.TextSize = 14.000
madeby.TextWrapped = true

note.Name = "note"
note.Parent = KeySystem
note.AnchorPoint = Vector2.new(0.5, 0.5)
note.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
note.BackgroundTransparency = 1.000
note.BorderColor3 = Color3.fromRGB(0, 0, 0)
note.BorderSizePixel = 0
note.Position = UDim2.new(0.5, 0, 0.92, 0)
note.Size = UDim2.new(0.95, 0, 0.08, 0)
note.Font = Enum.Font.Gotham
note.Text = thenoteofthekey
note.TextColor3 = Color3.fromRGB(255, 255, 255)
note.TextScaled = true
note.TextSize = 14.000
note.TextWrapped = true

KeyTextbox.Name = "KeyTextbox"
KeyTextbox.Parent = KeySystem
KeyTextbox.AnchorPoint = Vector2.new(0.5, 0.5)
KeyTextbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
KeyTextbox.BackgroundTransparency = 1.000
KeyTextbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
KeyTextbox.BorderSizePixel = 0
KeyTextbox.Position = UDim2.new(0.5, 0, 0.7, 0)
KeyTextbox.Size = UDim2.new(0.9, 0, 0.12, 0)
KeyTextbox.Font = Enum.Font.Gotham
KeyTextbox.PlaceholderText = "Enter Key"
KeyTextbox.Text = ""
KeyTextbox.TextColor3 = Color3.fromRGB(255, 255, 255)
KeyTextbox.TextScaled = true
KeyTextbox.TextSize = 14.000
KeyTextbox.TextWrapped = true

UICorner_4.CornerRadius = UDim.new(0, 15)
UICorner_4.Parent = KeyTextbox

if isfile(fileName) then
    local contents = readfile(fileName)
    local data = HttpService:JSONDecode(contents)
    local savedKey = data.key

    if savedKey and verifyKey(savedKey) then
        loadstring(game:HttpGet(loadstringlinktoload))()
        ScreenGui:Destroy()
        return -- Skip showing the GUI
    else
        onMessage("Saved key is invalid or expired. Please enter a new one.")
    end
end

end)